use ast::*;

grammar;

Num: f64 = r"[+-]?\d+(\.\d)?" => <>.parse::<f64>().unwrap();
Ident: String = r"[a-zA-z][\w']*\??" => String::from(<>);

//List: Vec<Expr> = {
//    List "," Expr,
//    Expr,
//}

pub Expr: Expr = {
    <l:Expr> "+" <r:ExprLevel1> => Expr::Comp(Operator::Add, Box::new(l), Box::new(r)),
    <l:Expr> "-" <r:ExprLevel1> => Expr::Comp(Operator::Sub, Box::new(l), Box::new(r)),
    ExprLevel1,
}

ExprLevel1: Expr = {
    <l:ExprLevel1> "*" <r:Value> => Expr::Comp(Operator::Mul, Box::new(l), Box::new(r)),
    <l:ExprLevel1> "/" <r:Value> => Expr::Comp(Operator::Div, Box::new(l), Box::new(r)),
    <l:ExprLevel1> "%" <r:Value> => Expr::Comp(Operator::Mod, Box::new(l), Box::new(r)),
    <l:ExprLevel1> "^" <r:Value> => Expr::Comp(Operator::Pow, Box::new(l), Box::new(r)),
    Value,
}

Value = {
    Num => Expr::Numeric(<>),
    Ident => Expr::Ref(<>),
    "(" <Expr> ")",
    //List => Expr::Set(<>),
    //<i:Ident> "(" <l:ExprList> ")" => Expr::Func(i, l),
};
