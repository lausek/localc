use crate::ast::*;

grammar;

Tier<Op,NextTier>: Expr = {
    <lhs:Tier<Op,NextTier>> <op:Op> <rhs:NextTier> => Expr::Comp(op, Box::new(lhs), Box::new(rhs)),
	NextTier
};

List<Over>: Vec<Over> = {
	<ls:List<Over>> "," <o:Over> => {
		let mut ls = ls;
		ls.push(o);
		ls
	},
	<o:Over> => vec![o],
};

Log: LogType = {
	"true" => true,
	"false" => false,
};
Num: NumType = r"[+-]?\d+(\.\d)?" => <>.parse::<NumType>().unwrap();
Ident: String = r"[a-zA-z][\w']*\??" => String::from(<>);
Tuple = List<Expr>;
Set = List<Expr>;

Value: Expr = {
    Log => Expr::Value(Value::Logical(<>)),
    Num => Expr::Value(Value::Numeric(<>)),
    Ident => Expr::Ref(<>),
	"(" <t:Tuple> ")" => {
		let mut t = t;
		if t.len() == 1 {
			t.remove(0)
		} else {
			Expr::Value(Value::Tuple(t))
		}
	},
	"{" <s:Set> <g:("|" <Set>)?> "}" => match g {
		Some(g) => {
			let gen = GenType::new();
			Expr::Value(Value::Gen(s, gen))
		}
		_ => {
		let mut s = s;
		if s.len() == 1 {
			s.remove(0)
		} else {
			Expr::Value(Value::Set(s))
		}
		}
	},
    <i:Ident> "(" <t:Tuple> ")" => Expr::Func(i, Some(t)),
    <i:Ident> "(" ")" => Expr::Func(i, None),
};

SumOps: Operator = {
	"+" => Operator::Add,
	"-" => Operator::Sub,
};

FactorOps: Operator = {
	"*" => Operator::Mul,
	"/" => Operator::Div,
	"%" => Operator::Rem,
	"^" => Operator::Pow,
};

VmOps: Operator = {
	"=" => Operator::Store,
};

OrOps: Operator = {
	"||" => Operator::Or,
};

AndOps: Operator = {
	"&&" => Operator::And,
};

CompareOps: Operator = {
    "==" => Operator::Eq,
    "!=" => Operator::Ne,
    ">=" => Operator::Ge,
    "<=" => Operator::Le,
    ">" => Operator::Gt,
    "<" => Operator::Lt,
};

Computations = Tier<SumOps, Tier<FactorOps, Value>>;
Compares = Tier<CompareOps, Computations>;
Logic = Tier<OrOps, Tier<AndOps, Compares>>;
pub Expr = Tier<VmOps, Logic>;
